/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ParkingLot as PrismaParkingLot } from "@prisma/client";

export class ParkingLotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParkingLotCountArgs, "select">
  ): Promise<number> {
    return this.prisma.parkingLot.count(args);
  }

  async parkingLots(
    args: Prisma.ParkingLotFindManyArgs
  ): Promise<PrismaParkingLot[]> {
    return this.prisma.parkingLot.findMany(args);
  }
  async parkingLot(
    args: Prisma.ParkingLotFindUniqueArgs
  ): Promise<PrismaParkingLot | null> {
    return this.prisma.parkingLot.findUnique(args);
  }
  async createParkingLot(
    args: Prisma.ParkingLotCreateArgs
  ): Promise<PrismaParkingLot> {
    return this.prisma.parkingLot.create(args);
  }
  async updateParkingLot(
    args: Prisma.ParkingLotUpdateArgs
  ): Promise<PrismaParkingLot> {
    return this.prisma.parkingLot.update(args);
  }
  async deleteParkingLot(
    args: Prisma.ParkingLotDeleteArgs
  ): Promise<PrismaParkingLot> {
    return this.prisma.parkingLot.delete(args);
  }
}
